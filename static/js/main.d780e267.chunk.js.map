{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","key","completed","onClick","checkItem","icon","text","deleteItem","enterAnimation","leaveAnimation","library","add","faTrash","faCheck","faTimes","App","state","completedItems","currentItem","keyValue","handleInput","bind","addItem","e","this","setState","target","value","Date","now","preventDefault","newItem","newItems","deleteCompletedItems","isCompletedBefore","filteredItems","filter","checkedItem","find","completedItemArr","id","onSubmit","type","placeholder","onChange","href","deleteAllItems","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d780e267.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ListItems.css';\r\nimport FlipMove from 'react-flip-move';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nfunction ListItems(props){\r\n    const items = props.items;\r\n    const listItems = items.map(item => {\r\n        return <li className=\"list-group-item\" key={item.key}>\r\n                 <span className={\"checkIcon \" + (item.completed ? \"crossIcon\" : \"\")} onClick={ () => props.checkItem(item.key, item.completed)}>\r\n                      <FontAwesomeIcon className=\"faicons\" icon={item.completed ? \"times\" : \"check\"}/>\r\n                </span>\r\n\r\n                <span className={'itemSpan ' + (item.completed ? \"done\" : \"\")}>\r\n                    {item.text}\r\n                </span>\r\n                <span className=\"deleteIcon\" onClick={ () => props.deleteItem(item.key, item.completed) }>\r\n                    <FontAwesomeIcon className=\"faicons\" icon=\"trash\"/>\r\n                </span>\r\n        </li>\r\n    })\r\n  \r\n    return(\r\n        <div> \r\n            <FlipMove enterAnimation=\"elevator\" leaveAnimation=\"elevator\">\r\n            {listItems} \r\n            </FlipMove>\r\n        </div>\r\n    )\r\n    \r\n}\r\nexport default ListItems;","import React from 'react';\nimport './App.css';\nimport ListItems from './ListItems';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTrash, faCheck, faTimes } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faTrash, faCheck, faTimes);\n\nclass App extends React.Component{\n\n  constructor(props){\n    super(props);\n    this.state = {\n      items:[],\n      completedItems:[],\n      currentItem:{\n        text:'',\n        keyValue: '',\n        completed: false,\n      },\n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.checkItem = this.checkItem.bind(this);\n  }\n  handleInput(e){\n    this.setState({\n      currentItem:{\n          text:e.target.value,\n          key:Date.now(),\n          completed: false,\n        }\n    });\n  }\n\n  addItem(e){\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    if(newItem.text !== \"\"){\n      const newItems = [...this.state.items, newItem];\n      this.setState({\n        items:newItems,\n        currentItem:{\n          text:'',\n          key:'',\n          completed:false,\n        }\n      })\n    }\n  }\n\n  deleteAllItems(deleteCompletedItems){\n    if(deleteCompletedItems){\n      this.setState({\n        completedItems:[]\n      })\n    }\n    else {\n      this.setState({\n        items:[]\n      })\n   }\n  }\n\n  deleteItem(key, isCompletedBefore){\n    if(isCompletedBefore){\n      const filteredItems = this.state.completedItems.filter(item =>\n        item.key !== key);\n        this.setState({\n          completedItems:filteredItems\n        })\n    } else {\n      const filteredItems = this.state.items.filter(item =>\n        item.key !== key);\n        this.setState({\n          items:filteredItems\n        })\n    }\n  \n  }\n\n  checkItem(key, isCompletedBefore){\n\n    let checkedItem = '';\n    if(isCompletedBefore){\n        checkedItem = this.state.completedItems.find(item => item.key === key);\n    }else {\n        checkedItem = this.state.items.find(item => item.key === key);\n    }\n\n    if(checkedItem.completed === false){\n      checkedItem.completed = true;\n     const completedItemArr = [...this.state.completedItems, checkedItem];\n\n      this.setState({\n        completedItems:completedItemArr,\n      })\n      this.deleteItem(key);\n    } else {\n      checkedItem.completed = false;\n     \n      this.setState({\n        items:[...this.state.items, checkedItem],\n        completedItems: this.state.completedItems.filter(item => item.key !== key)\n      })\n    }\n  }\n\n  render(){\n    return(\n      <div className=\"container p-3\">\n      <h1 className=\"app-title\" id=\"header\">TODO LIST</h1>\n      <div className=\"card\">\n          <div className=\"card-header\">\n              New Task \n          </div>\n          <div className=\"card-body\">\n              <form id=\"addTaskForm\" onSubmit={this.addItem}>\n                  <div className=\"input-group mt-3\">\n                  <input type=\"text\" id=\"txtTaskName\" className=\"form-control\" placeholder=\"Enter what you should do\" \n                  onChange={this.handleInput} value={this.state.currentItem.text}/>\n                    <button className=\"btn btn-primary\" type=\"submit\" id=\"btnAddNewTask\">\n                        <i className=\"fas fa-plus\"></i> ADD\n                     </button>\n                  </div>\n              </form>\n          </div>\n          <div className=\"card mt-3\">\n              <div className=\"card-header\">\n              Task List\n              <a href=\"#\" onClick={(e) => this.deleteAllItems(false)}  id=\"deleteAllTasks\" className=\"btn btn-outline-danger btn-sm delete-all float-right\">Delete All</a>\n              </div>\n              <ul id=\"task-list\" className=\"list-group\">\n                <ListItems items = {this.state.items} deleteItem = {this.deleteItem} checkItem = {this.checkItem}></ListItems>\n              </ul>\n          </div>\n          </div>\n\n          <div className=\"card mt-3\">\n              <div className=\"card-header\">\n              Completed Task List\n              <a href=\"#\" onClick={(e) => this.deleteAllItems(true)}  id=\"deleteAllCompletedTasks\" className=\"btn btn-outline-danger btn-sm delete-all float-right\">Delete All</a>\n              </div>\n              <ul id=\"completed-task-list\" className=\"list-group\">\n\n              <ListItems items = {this.state.completedItems} deleteItem = {this.deleteItem} checkItem = {this.checkItem}></ListItems>\n\n              </ul>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}